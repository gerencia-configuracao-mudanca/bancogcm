#! /usr/bin/env python
# -*- coding: utf-8 -*-
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.
import sys, re, json, requests


requiredRegex = "#(\d+)"  
#Get the commit file
commitMessageFile = open(sys.argv[1]) #The first argument is the file  
commitMessage = commitMessageFile.read().strip()

repo_issues = 'https://api.github.com/repos/gerencia-configuracao-mudanca/bancogcm/issues'
response = requests.get(repo_issues)
data = response.json()

issues_message = re.findall(requiredRegex, commitMessage)

found_issue = False
if len(issues_message) == 0:
	print "Mensagem de commit não está referenciando uma issue!"
	sys.exit(1)
elif len(issues_message) == 1:
	for issue in data:
		
		number = issue["number"]
		#number = issue["number"]

		if str(number) == str(issues_message[0]):
			found_issue = True
			labels = issue["labels"]

			in_progress = True

			for label in labels:
				if label["name"] == "rejeitada" or label["name"] == "validada":
					in_progress = False

			if in_progress is False:
					print "Issue em estado invalido!"
					sys.exit(1)
			else:
				print "Commit realizado!"
				sys.exit(0)

	if found_issue is False:
		print "Issue não existe!"
		sys.exit(1)

sys.exit(1)  
